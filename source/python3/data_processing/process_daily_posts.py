from pyspark import SparkContext
from pyspark.sql import SparkSession, SQLContext
import time
from calendar import monthrange
import argparse
import re

from convert_to_parquet import convert_to_parquet
from process_daily_post_parquet_file import process_daily_post_parquet_file


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    required = parser.add_argument_group('required arguments')
    required.add_argument("--year", help="post year (e.g. 2019)",
                          required=True)
    required.add_argument("--month", help="post month (e.g. 1 for January" +
                           " and 12 for December",  required=True)
    optional = parser.add_argument_group("optional arguments")
    optional.add_argument("--s3_bucket", help="url for the AWS S3 bucket holding parquet files." +
                          "This program assumes that the user is using parquet" +
                          " files generated by the convert_to_parquet.py utility " +
                          "script. The naming convention for that script is " +
                          "<s3_bucket>/posts/<year>-<month>/<year>-<month>-<day>" +
                          ".parquet e.g. 's3a://my-parquet-bucket/2019-12/2019-12-01.parquet'",
                          default = "s3a://reddit-data-parquet/")
    optional.add_argument("--logfile_name", help="name of the logfile to which to" +
                          " write", default="log/process_daily_posts_2019_12.log")
     
    args =  parser.parse_args()

    post_year = int(args.year)
    post_month = int(args.month)
    s3_bucket = args.s3_bucket

    sc = SparkContext("spark://ec2-3-219-180-255.compute-1.amazonaws.com:7077","convert_to_parquet")
    sqlContext = SQLContext(sc)
    #get number of days in month
    first_day_weekday, number_days_month = monthrange(post_year, post_month)                          
    daily_post_files = ["posts/" + str(post_year) + "-" + str(post_month)
                        + "/RS_" + str(post_year) + "-" + str(post_month)
                        + "-" + str(i).zfill(2) + ".parquet" for i in
                        range(1,number_days_month + 1)]
    logfile_name = args.logfile_name
    with open(logfile_name, "a") as logfile:
        for daily_post_file in daily_post_files:
            
            time_start = time.time()
            post_day = re.sub(".*-", "", daily_post_file).replace(".parquet", "")
            process_daily_post_parquet_file(sc, sqlContext, post_year, post_month,
                                            post_day, daily_post_file, logfile)
            time_end = time.time()
            logfile.write("time elapsed: {} \n\n".format(time_end - time_start))
